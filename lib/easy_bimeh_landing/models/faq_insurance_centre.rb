# easy_bimeh_landing
#
# This file was automatically generated by APIMATIC
# v2.0 ( https://apimatic.io ).

module EasyBimehLanding
  # FaqInsuranceCentre Model.
  class FaqInsuranceCentre < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :insurance_centre_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :question

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :answer

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :sort_priority

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :question_group_param_id

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :is_active

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :the_insurance_centre

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :the_question_group_param

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :create_on

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :update_on

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :updated_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :create_on_persian_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :update_on_persian_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['insurance_centre_id'] = 'insuranceCentreId'
      @_hash['question'] = 'question'
      @_hash['answer'] = 'answer'
      @_hash['sort_priority'] = 'sortPriority'
      @_hash['question_group_param_id'] = 'questionGroupParamId'
      @_hash['is_active'] = 'isActive'
      @_hash['the_insurance_centre'] = 'theInsuranceCentre'
      @_hash['the_question_group_param'] = 'theQuestionGroupParam'
      @_hash['create_on'] = 'createOn'
      @_hash['update_on'] = 'updateOn'
      @_hash['created_by'] = 'createdBy'
      @_hash['updated_by'] = 'updatedBy'
      @_hash['create_on_persian_date'] = 'createOnPersianDate'
      @_hash['update_on_persian_date'] = 'updateOnPersianDate'
      @_hash
    end

    def initialize(id = nil,
                   insurance_centre_id = nil,
                   question = nil,
                   answer = nil,
                   question_group_param_id = nil,
                   is_active = nil,
                   create_on = nil,
                   update_on = nil,
                   created_by = nil,
                   create_on_persian_date = nil,
                   update_on_persian_date = nil,
                   sort_priority = nil,
                   the_insurance_centre = nil,
                   the_question_group_param = nil,
                   updated_by = nil)
      @id = id
      @insurance_centre_id = insurance_centre_id
      @question = question
      @answer = answer
      @sort_priority = sort_priority
      @question_group_param_id = question_group_param_id
      @is_active = is_active
      @the_insurance_centre = the_insurance_centre
      @the_question_group_param = the_question_group_param
      @create_on = create_on
      @update_on = update_on
      @created_by = created_by
      @updated_by = updated_by
      @create_on_persian_date = create_on_persian_date
      @update_on_persian_date = update_on_persian_date
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      insurance_centre_id = hash['insuranceCentreId']
      question = hash['question']
      answer = hash['answer']
      question_group_param_id = hash['questionGroupParamId']
      is_active = hash['isActive']
      create_on = hash['createOn']
      update_on = hash['updateOn']
      created_by = hash['createdBy']
      create_on_persian_date = hash['createOnPersianDate']
      update_on_persian_date = hash['updateOnPersianDate']
      sort_priority = hash['sortPriority']
      the_insurance_centre = hash['theInsuranceCentre']
      the_question_group_param = hash['theQuestionGroupParam']
      updated_by = hash['updatedBy']

      # Create object from extracted values.
      FaqInsuranceCentre.new(id,
                             insurance_centre_id,
                             question,
                             answer,
                             question_group_param_id,
                             is_active,
                             create_on,
                             update_on,
                             created_by,
                             create_on_persian_date,
                             update_on_persian_date,
                             sort_priority,
                             the_insurance_centre,
                             the_question_group_param,
                             updated_by)
    end
  end
end
