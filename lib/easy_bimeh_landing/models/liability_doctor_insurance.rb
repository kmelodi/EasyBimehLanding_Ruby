# easy_bimeh_landing
#
# This file was automatically generated by APIMATIC
# v2.0 ( https://apimatic.io ).

module EasyBimehLanding
  # مدل اصلی بیمه ی مسئولیت پزشکان
  class LiabilityDoctorInsurance < BaseModel
    # آیا طرح بیمه ای فعالی دارد؟
    # @return [Boolean]
    attr_accessor :has_plan

    # حوزه ی فعالیت
    # @return [List of ActivityArea]
    attr_accessor :activity_area

    # لیست تخصص ها
    # @return [List of Expertise]
    attr_accessor :expertises

    # لیست سقف تعهد
    # @return [List of CommitmentCeiling]
    attr_accessor :commitment_ceilings

    # مبلغ تعهد
    # @return [Integer]
    attr_accessor :physical_commitment

    # لیست شرکت های بیمه
    # @return [List of InsuranceCompany]
    attr_accessor :insurance_companies

    # تخفیف های بیمه ای
    # @return [List of InsuranceRiskLevel]
    attr_accessor :insurance_risk_levels

    # دوره های بیمه ای
    # @return [List of InsurancePolicyTerm]
    attr_accessor :insurance_policy_terms

    # لیست استان ها
    # @return [List of Province]
    attr_accessor :provinces

    # لیست شهر ها
    # @return [List of String]
    attr_accessor :cities

    # لیست مناطق شهر
    # @return [List of String]
    attr_accessor :city_regions

    # نحوه ی ارسال
    # @return [List of ShippingType]
    attr_accessor :shipping_types

    # روش های پستی
    # @return [List of PostType]
    attr_accessor :post_types

    # شرایط بیمه نامه
    # @return [InsurancePolicyCondition]
    attr_accessor :insurance_policy_condition

    # اطلاعات بیمه نامه
    # @return [InsuranceDataLiabilityDoctorInsurance]
    attr_accessor :insurance_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['has_plan'] = 'hasPlan'
      @_hash['activity_area'] = 'activityArea'
      @_hash['expertises'] = 'expertises'
      @_hash['commitment_ceilings'] = 'commitmentCeilings'
      @_hash['physical_commitment'] = 'physicalCommitment'
      @_hash['insurance_companies'] = 'insuranceCompanies'
      @_hash['insurance_risk_levels'] = 'insuranceRiskLevels'
      @_hash['insurance_policy_terms'] = 'insurancePolicyTerms'
      @_hash['provinces'] = 'provinces'
      @_hash['cities'] = 'cities'
      @_hash['city_regions'] = 'cityRegions'
      @_hash['shipping_types'] = 'shippingTypes'
      @_hash['post_types'] = 'postTypes'
      @_hash['insurance_policy_condition'] = 'insurancePolicyCondition'
      @_hash['insurance_data'] = 'insuranceData'
      @_hash
    end

    def initialize(has_plan = nil,
                   activity_area = nil,
                   expertises = nil,
                   commitment_ceilings = nil,
                   physical_commitment = nil,
                   insurance_companies = nil,
                   insurance_risk_levels = nil,
                   insurance_policy_terms = nil,
                   provinces = nil,
                   cities = nil,
                   city_regions = nil,
                   shipping_types = nil,
                   post_types = nil,
                   insurance_policy_condition = nil,
                   insurance_data = nil)
      @has_plan = has_plan
      @activity_area = activity_area
      @expertises = expertises
      @commitment_ceilings = commitment_ceilings
      @physical_commitment = physical_commitment
      @insurance_companies = insurance_companies
      @insurance_risk_levels = insurance_risk_levels
      @insurance_policy_terms = insurance_policy_terms
      @provinces = provinces
      @cities = cities
      @city_regions = city_regions
      @shipping_types = shipping_types
      @post_types = post_types
      @insurance_policy_condition = insurance_policy_condition
      @insurance_data = insurance_data
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      has_plan = hash['hasPlan']
      # Parameter is an array, so we need to iterate through it
      activity_area = nil
      unless hash['activityArea'].nil?
        activity_area = []
        hash['activityArea'].each do |structure|
          activity_area << (ActivityArea.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      expertises = nil
      unless hash['expertises'].nil?
        expertises = []
        hash['expertises'].each do |structure|
          expertises << (Expertise.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      commitment_ceilings = nil
      unless hash['commitmentCeilings'].nil?
        commitment_ceilings = []
        hash['commitmentCeilings'].each do |structure|
          commitment_ceilings << (CommitmentCeiling.from_hash(structure) if structure)
        end
      end
      physical_commitment = hash['physicalCommitment']
      # Parameter is an array, so we need to iterate through it
      insurance_companies = nil
      unless hash['insuranceCompanies'].nil?
        insurance_companies = []
        hash['insuranceCompanies'].each do |structure|
          insurance_companies << (InsuranceCompany.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      insurance_risk_levels = nil
      unless hash['insuranceRiskLevels'].nil?
        insurance_risk_levels = []
        hash['insuranceRiskLevels'].each do |structure|
          insurance_risk_levels << (InsuranceRiskLevel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      insurance_policy_terms = nil
      unless hash['insurancePolicyTerms'].nil?
        insurance_policy_terms = []
        hash['insurancePolicyTerms'].each do |structure|
          insurance_policy_terms << (InsurancePolicyTerm.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      provinces = nil
      unless hash['provinces'].nil?
        provinces = []
        hash['provinces'].each do |structure|
          provinces << (Province.from_hash(structure) if structure)
        end
      end
      cities = hash['cities']
      city_regions = hash['cityRegions']
      # Parameter is an array, so we need to iterate through it
      shipping_types = nil
      unless hash['shippingTypes'].nil?
        shipping_types = []
        hash['shippingTypes'].each do |structure|
          shipping_types << (ShippingType.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      post_types = nil
      unless hash['postTypes'].nil?
        post_types = []
        hash['postTypes'].each do |structure|
          post_types << (PostType.from_hash(structure) if structure)
        end
      end
      if hash['insurancePolicyCondition']
        insurance_policy_condition = InsurancePolicyCondition.from_hash(hash['insurancePolicyCondition'])
      end
      if hash['insuranceData']
        insurance_data = InsuranceDataLiabilityDoctorInsurance.from_hash(hash['insuranceData'])
      end

      # Create object from extracted values.
      LiabilityDoctorInsurance.new(has_plan,
                                   activity_area,
                                   expertises,
                                   commitment_ceilings,
                                   physical_commitment,
                                   insurance_companies,
                                   insurance_risk_levels,
                                   insurance_policy_terms,
                                   provinces,
                                   cities,
                                   city_regions,
                                   shipping_types,
                                   post_types,
                                   insurance_policy_condition,
                                   insurance_data)
    end
  end
end
