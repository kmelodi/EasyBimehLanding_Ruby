# easy_bimeh_landing
#
# This file was automatically generated by APIMATIC
# v2.0 ( https://apimatic.io ).

module EasyBimehLanding
  # ElevatorInsurance Model.
  class ElevatorInsurance < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :has_plan

    # TODO: Write general description for this method
    # @return [List of ComboDataModel]
    attr_accessor :building_use_types

    # TODO: Write general description for this method
    # @return [List of ElevatorType]
    attr_accessor :elevator_types

    # TODO: Write general description for this method
    # @return [List of DefectOrganCoverage]
    attr_accessor :defect_organ_coverage

    # TODO: Write general description for this method
    # @return [List of DeathCapitalCoverage]
    attr_accessor :death_capital_coverage

    # TODO: Write general description for this method
    # @return [List of FinancialCoverage]
    attr_accessor :financial_coverage

    # TODO: Write general description for this method
    # @return [List of MedicalCostCoverage]
    attr_accessor :medical_cost_coverage

    # TODO: Write general description for this method
    # @return [List of InsuranceRiskLevel]
    attr_accessor :insurance_risk_levels

    # TODO: Write general description for this method
    # @return [List of InsurancePolicyTerm]
    attr_accessor :insurance_policy_terms

    # TODO: Write general description for this method
    # @return [List of InsuranceCompany]
    attr_accessor :insurance_companies

    # TODO: Write general description for this method
    # @return [List of Province]
    attr_accessor :provinces

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :cities

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :city_regions

    # TODO: Write general description for this method
    # @return [List of ShippingType]
    attr_accessor :shipping_types

    # TODO: Write general description for this method
    # @return [List of PostType]
    attr_accessor :post_types

    # TODO: Write general description for this method
    # @return [InsurancePolicyCondition]
    attr_accessor :insurance_policy_condition

    # TODO: Write general description for this method
    # @return [InsuranceDataElevatorInsurance]
    attr_accessor :insurance_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['has_plan'] = 'hasPlan'
      @_hash['building_use_types'] = 'buildingUseTypes'
      @_hash['elevator_types'] = 'elevatorTypes'
      @_hash['defect_organ_coverage'] = 'defectOrganCoverage'
      @_hash['death_capital_coverage'] = 'deathCapitalCoverage'
      @_hash['financial_coverage'] = 'financialCoverage'
      @_hash['medical_cost_coverage'] = 'medicalCostCoverage'
      @_hash['insurance_risk_levels'] = 'insuranceRiskLevels'
      @_hash['insurance_policy_terms'] = 'insurancePolicyTerms'
      @_hash['insurance_companies'] = 'insuranceCompanies'
      @_hash['provinces'] = 'provinces'
      @_hash['cities'] = 'cities'
      @_hash['city_regions'] = 'cityRegions'
      @_hash['shipping_types'] = 'shippingTypes'
      @_hash['post_types'] = 'postTypes'
      @_hash['insurance_policy_condition'] = 'insurancePolicyCondition'
      @_hash['insurance_data'] = 'insuranceData'
      @_hash
    end

    def initialize(has_plan = nil,
                   building_use_types = nil,
                   elevator_types = nil,
                   defect_organ_coverage = nil,
                   death_capital_coverage = nil,
                   financial_coverage = nil,
                   medical_cost_coverage = nil,
                   insurance_risk_levels = nil,
                   insurance_policy_terms = nil,
                   insurance_companies = nil,
                   provinces = nil,
                   cities = nil,
                   city_regions = nil,
                   shipping_types = nil,
                   post_types = nil,
                   insurance_policy_condition = nil,
                   insurance_data = nil)
      @has_plan = has_plan
      @building_use_types = building_use_types
      @elevator_types = elevator_types
      @defect_organ_coverage = defect_organ_coverage
      @death_capital_coverage = death_capital_coverage
      @financial_coverage = financial_coverage
      @medical_cost_coverage = medical_cost_coverage
      @insurance_risk_levels = insurance_risk_levels
      @insurance_policy_terms = insurance_policy_terms
      @insurance_companies = insurance_companies
      @provinces = provinces
      @cities = cities
      @city_regions = city_regions
      @shipping_types = shipping_types
      @post_types = post_types
      @insurance_policy_condition = insurance_policy_condition
      @insurance_data = insurance_data
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      has_plan = hash['hasPlan']
      # Parameter is an array, so we need to iterate through it
      building_use_types = nil
      unless hash['buildingUseTypes'].nil?
        building_use_types = []
        hash['buildingUseTypes'].each do |structure|
          building_use_types << (ComboDataModel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      elevator_types = nil
      unless hash['elevatorTypes'].nil?
        elevator_types = []
        hash['elevatorTypes'].each do |structure|
          elevator_types << (ElevatorType.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      defect_organ_coverage = nil
      unless hash['defectOrganCoverage'].nil?
        defect_organ_coverage = []
        hash['defectOrganCoverage'].each do |structure|
          defect_organ_coverage << (DefectOrganCoverage.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      death_capital_coverage = nil
      unless hash['deathCapitalCoverage'].nil?
        death_capital_coverage = []
        hash['deathCapitalCoverage'].each do |structure|
          death_capital_coverage << (DeathCapitalCoverage.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      financial_coverage = nil
      unless hash['financialCoverage'].nil?
        financial_coverage = []
        hash['financialCoverage'].each do |structure|
          financial_coverage << (FinancialCoverage.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      medical_cost_coverage = nil
      unless hash['medicalCostCoverage'].nil?
        medical_cost_coverage = []
        hash['medicalCostCoverage'].each do |structure|
          medical_cost_coverage << (MedicalCostCoverage.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      insurance_risk_levels = nil
      unless hash['insuranceRiskLevels'].nil?
        insurance_risk_levels = []
        hash['insuranceRiskLevels'].each do |structure|
          insurance_risk_levels << (InsuranceRiskLevel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      insurance_policy_terms = nil
      unless hash['insurancePolicyTerms'].nil?
        insurance_policy_terms = []
        hash['insurancePolicyTerms'].each do |structure|
          insurance_policy_terms << (InsurancePolicyTerm.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      insurance_companies = nil
      unless hash['insuranceCompanies'].nil?
        insurance_companies = []
        hash['insuranceCompanies'].each do |structure|
          insurance_companies << (InsuranceCompany.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      provinces = nil
      unless hash['provinces'].nil?
        provinces = []
        hash['provinces'].each do |structure|
          provinces << (Province.from_hash(structure) if structure)
        end
      end
      cities = hash['cities']
      city_regions = hash['cityRegions']
      # Parameter is an array, so we need to iterate through it
      shipping_types = nil
      unless hash['shippingTypes'].nil?
        shipping_types = []
        hash['shippingTypes'].each do |structure|
          shipping_types << (ShippingType.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      post_types = nil
      unless hash['postTypes'].nil?
        post_types = []
        hash['postTypes'].each do |structure|
          post_types << (PostType.from_hash(structure) if structure)
        end
      end
      if hash['insurancePolicyCondition']
        insurance_policy_condition = InsurancePolicyCondition.from_hash(hash['insurancePolicyCondition'])
      end
      if hash['insuranceData']
        insurance_data = InsuranceDataElevatorInsurance.from_hash(hash['insuranceData'])
      end

      # Create object from extracted values.
      ElevatorInsurance.new(has_plan,
                            building_use_types,
                            elevator_types,
                            defect_organ_coverage,
                            death_capital_coverage,
                            financial_coverage,
                            medical_cost_coverage,
                            insurance_risk_levels,
                            insurance_policy_terms,
                            insurance_companies,
                            provinces,
                            cities,
                            city_regions,
                            shipping_types,
                            post_types,
                            insurance_policy_condition,
                            insurance_data)
    end
  end
end
