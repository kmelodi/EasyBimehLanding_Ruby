# easy_bimeh_landing
#
# This file was automatically generated by APIMATIC
# v2.0 ( https://apimatic.io ).

module EasyBimehLanding
  # Earthquake Model.
  class Earthquake < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :has_plan

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :insurance_centre_province_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :insurance_centre_city_id

    # TODO: Write general description for this method
    # @return [List of ComboDataModel]
    attr_accessor :insurance_centre_cities

    # TODO: Write general description for this method
    # @return [List of ComboDataModel]
    attr_accessor :building_types

    # TODO: Write general description for this method
    # @return [List of ComboDataModel]
    attr_accessor :skeleton_type_buildings

    # TODO: Write general description for this method
    # @return [List of ComboDataModel]
    attr_accessor :building_use_types

    # TODO: Write general description for this method
    # @return [List of InsurancePolicyTerm]
    attr_accessor :insurance_policy_terms

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :insurance_extra_coverage

    # TODO: Write general description for this method
    # @return [List of EverySquareMeterCoverage]
    attr_accessor :every_square_meter_coverage

    # TODO: Write general description for this method
    # @return [List of Province]
    attr_accessor :provinces

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :cities

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :city_regions

    # TODO: Write general description for this method
    # @return [List of ShippingType]
    attr_accessor :shipping_types

    # TODO: Write general description for this method
    # @return [List of PostType]
    attr_accessor :post_types

    # TODO: Write general description for this method
    # @return [InsurancePolicyCondition]
    attr_accessor :insurance_policy_condition

    # TODO: Write general description for this method
    # @return [InsuranceDataFireInsurance]
    attr_accessor :insurance_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['has_plan'] = 'hasPlan'
      @_hash['insurance_centre_province_id'] = 'insuranceCentreProvinceId'
      @_hash['insurance_centre_city_id'] = 'insuranceCentreCityId'
      @_hash['insurance_centre_cities'] = 'insuranceCentreCities'
      @_hash['building_types'] = 'buildingTypes'
      @_hash['skeleton_type_buildings'] = 'skeletonTypeBuildings'
      @_hash['building_use_types'] = 'buildingUseTypes'
      @_hash['insurance_policy_terms'] = 'insurancePolicyTerms'
      @_hash['insurance_extra_coverage'] = 'insuranceExtraCoverage'
      @_hash['every_square_meter_coverage'] = 'everySquareMeterCoverage'
      @_hash['provinces'] = 'provinces'
      @_hash['cities'] = 'cities'
      @_hash['city_regions'] = 'cityRegions'
      @_hash['shipping_types'] = 'shippingTypes'
      @_hash['post_types'] = 'postTypes'
      @_hash['insurance_policy_condition'] = 'insurancePolicyCondition'
      @_hash['insurance_data'] = 'insuranceData'
      @_hash
    end

    def initialize(has_plan = nil,
                   insurance_centre_province_id = nil,
                   insurance_centre_city_id = nil,
                   insurance_centre_cities = nil,
                   building_types = nil,
                   skeleton_type_buildings = nil,
                   building_use_types = nil,
                   insurance_policy_terms = nil,
                   insurance_extra_coverage = nil,
                   every_square_meter_coverage = nil,
                   provinces = nil,
                   cities = nil,
                   city_regions = nil,
                   shipping_types = nil,
                   post_types = nil,
                   insurance_policy_condition = nil,
                   insurance_data = nil)
      @has_plan = has_plan
      @insurance_centre_province_id = insurance_centre_province_id
      @insurance_centre_city_id = insurance_centre_city_id
      @insurance_centre_cities = insurance_centre_cities
      @building_types = building_types
      @skeleton_type_buildings = skeleton_type_buildings
      @building_use_types = building_use_types
      @insurance_policy_terms = insurance_policy_terms
      @insurance_extra_coverage = insurance_extra_coverage
      @every_square_meter_coverage = every_square_meter_coverage
      @provinces = provinces
      @cities = cities
      @city_regions = city_regions
      @shipping_types = shipping_types
      @post_types = post_types
      @insurance_policy_condition = insurance_policy_condition
      @insurance_data = insurance_data
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      has_plan = hash['hasPlan']
      insurance_centre_province_id = hash['insuranceCentreProvinceId']
      insurance_centre_city_id = hash['insuranceCentreCityId']
      # Parameter is an array, so we need to iterate through it
      insurance_centre_cities = nil
      unless hash['insuranceCentreCities'].nil?
        insurance_centre_cities = []
        hash['insuranceCentreCities'].each do |structure|
          insurance_centre_cities << (ComboDataModel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      building_types = nil
      unless hash['buildingTypes'].nil?
        building_types = []
        hash['buildingTypes'].each do |structure|
          building_types << (ComboDataModel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      skeleton_type_buildings = nil
      unless hash['skeletonTypeBuildings'].nil?
        skeleton_type_buildings = []
        hash['skeletonTypeBuildings'].each do |structure|
          skeleton_type_buildings << (ComboDataModel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      building_use_types = nil
      unless hash['buildingUseTypes'].nil?
        building_use_types = []
        hash['buildingUseTypes'].each do |structure|
          building_use_types << (ComboDataModel.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      insurance_policy_terms = nil
      unless hash['insurancePolicyTerms'].nil?
        insurance_policy_terms = []
        hash['insurancePolicyTerms'].each do |structure|
          insurance_policy_terms << (InsurancePolicyTerm.from_hash(structure) if structure)
        end
      end
      insurance_extra_coverage = hash['insuranceExtraCoverage']
      # Parameter is an array, so we need to iterate through it
      every_square_meter_coverage = nil
      unless hash['everySquareMeterCoverage'].nil?
        every_square_meter_coverage = []
        hash['everySquareMeterCoverage'].each do |structure|
          every_square_meter_coverage << (EverySquareMeterCoverage.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      provinces = nil
      unless hash['provinces'].nil?
        provinces = []
        hash['provinces'].each do |structure|
          provinces << (Province.from_hash(structure) if structure)
        end
      end
      cities = hash['cities']
      city_regions = hash['cityRegions']
      # Parameter is an array, so we need to iterate through it
      shipping_types = nil
      unless hash['shippingTypes'].nil?
        shipping_types = []
        hash['shippingTypes'].each do |structure|
          shipping_types << (ShippingType.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      post_types = nil
      unless hash['postTypes'].nil?
        post_types = []
        hash['postTypes'].each do |structure|
          post_types << (PostType.from_hash(structure) if structure)
        end
      end
      if hash['insurancePolicyCondition']
        insurance_policy_condition = InsurancePolicyCondition.from_hash(hash['insurancePolicyCondition'])
      end
      if hash['insuranceData']
        insurance_data = InsuranceDataFireInsurance.from_hash(hash['insuranceData'])
      end

      # Create object from extracted values.
      Earthquake.new(has_plan,
                     insurance_centre_province_id,
                     insurance_centre_city_id,
                     insurance_centre_cities,
                     building_types,
                     skeleton_type_buildings,
                     building_use_types,
                     insurance_policy_terms,
                     insurance_extra_coverage,
                     every_square_meter_coverage,
                     provinces,
                     cities,
                     city_regions,
                     shipping_types,
                     post_types,
                     insurance_policy_condition,
                     insurance_data)
    end
  end
end
