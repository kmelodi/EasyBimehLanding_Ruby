# easy_bimeh_landing
#
# This file was automatically generated by APIMATIC
# v2.0 ( https://apimatic.io ).

module EasyBimehLanding
  # FooterController
  class FooterController < BaseController
    @instance = FooterController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # دریافت اطلاعات درباره ی ما
    # @param [String] x_api_key Required parameter: Example:
    # @return BaseModelPortalLandingContactAbout response from the API call
    def get_portal_landing_contact_about(x_api_key)
      # Prepare query url.
      _path_url = '/InsuranceCentre/PortalLandingContactAbout/hfz1'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'x-api-key' => x_api_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BaseModelPortalLandingContactAbout.from_hash(decoded)
    end

    # دریافت لیست سوالات متداول
    # @param [String] x_api_key Required parameter: کلید اختصاصی ارتباط با
    # سرور
    # @return BaseModelFaqInsuranceCentre response from the API call
    def get_faq_insurance_centre(x_api_key)
      # Prepare query url.
      _path_url = '/Faq/InsuranceCentre/hfz1'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'x-api-key' => x_api_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BaseModelFaqInsuranceCentre.from_hash(decoded)
    end

    # پیگیری وضعیت بیمه نامه
    # @param [Integer] tracking_code Required parameter: شماره ی پیگیری بیمه
    # نامه
    # @param [Long] national_code Required parameter: کد ملی کاربر
    # @param [String] x_api_key Required parameter: کلید اختصاصی ارتباط با
    # سرور
    # @return BaseModelInsurancePolicyTracking response from the API call
    def get_insurance_policy_tracking(tracking_code,
                                      national_code,
                                      x_api_key)
      # Prepare query url.
      _path_url = '/InsurancePolicy/Tracking'
      _query_builder = Configuration.get_base_uri
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'trackingCode' => tracking_code,
          'nationalCode' => national_code
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'x-api-key' => x_api_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 500
        raise InternalServerErrorException.new(
          'Internal Server Error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BaseModelInsurancePolicyTracking.from_hash(decoded)
    end
  end
end
